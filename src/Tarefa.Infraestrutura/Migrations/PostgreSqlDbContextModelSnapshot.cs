// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Tarefa.Infraestrutura.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    partial class PostgreSqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tarefa.Domain.Entidades.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@teste.com",
                            Nome = "Administrador",
                            SenhaHash = "$2a$11$5Ugj78AjWYTtCSF60cJQ1.DFM88D01VA3cYXO3mU4gDiPJTqKVUJS"
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "joao@teste.com",
                            Nome = "João Silva",
                            SenhaHash = "$2a$11$Px5lZvitdt4NjLObT2JbWuPx/PjmAr.jkvMM6ttaVYbQTnadCYaqa"
                        });
                });

            modelBuilder.Entity("Tarefas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Concluida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataLembrete")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("LembreteEnviado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Prioridade")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Concluida");

                    b.HasIndex("DataConclusao");

                    b.HasIndex("Prioridade");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("DataLembrete", "LembreteEnviado");

                    b.HasIndex("UsuarioId", "Concluida");

                    b.ToTable("Tarefas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Concluida = false,
                            DataAtualizacao = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            DataConclusao = new DateTime(2024, 12, 31, 18, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            DataLembrete = new DateTime(2024, 12, 30, 16, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Revisar conceitos de DDD, SOLID e implementar projeto",
                            LembreteEnviado = false,
                            Prioridade = 3,
                            Titulo = "Estudar Clean Architecture",
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 2,
                            Concluida = false,
                            DataAtualizacao = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            DataConclusao = new DateTime(2024, 12, 25, 20, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Criar interface responsiva para gerenciar tarefas",
                            LembreteEnviado = false,
                            Prioridade = 2,
                            Titulo = "Implementar Frontend React",
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 3,
                            Concluida = true,
                            DataAtualizacao = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            DataConclusao = new DateTime(2024, 12, 20, 15, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Configurar CI/CD e fazer deploy no Heroku",
                            LembreteEnviado = false,
                            Prioridade = 4,
                            Titulo = "Deploy da Aplicação",
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("Tarefas", b =>
                {
                    b.HasOne("Tarefa.Domain.Entidades.Usuarios", "Usuario")
                        .WithMany("Tarefas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tarefa.Domain.Entidades.Usuarios", b =>
                {
                    b.Navigation("Tarefas");
                });
#pragma warning restore 612, 618
        }
    }
}
